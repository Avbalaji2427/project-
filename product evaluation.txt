// For Validation of Customers
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Login</title>
<script> 
function validate()
{ 
     var username = document.form.username.value; 
     var password = document.form.password.value;
 
     if (username==null || username=="")
     { 
     alert("Username cannot be blank"); 
     return false; 
     }
     else if(password==null || password=="")
     { 
     alert("Password cannot be blank"); 
     return false; 
     } 
}
</script> 
</head>
<body>
    <div style="text-align:center"><h1>Login application </h1> </div>
    <br>
    <form name="form" action="LoginServlet" method="post" onsubmit="return validate()">
        <table align="center">
         <tr>
         <td>Username</td>
         <td><input type="text" name="username" /></td>
         </tr>
         <tr>
         <td>Password</td>
         <td><input type="password" name="password" /></td>
         </tr>
         <tr> <!-- request.getAttribute() -->
         <td><span style="color:red"><%=(request.getAttribute("errMessage") == null) ? ""
         : request.getAttribute("errMessage")%></span></td>
         </tr>
         <tr>
         <td></td>
         <td><input type="submit" value="Login"></input><input
         type="reset" value="Reset"></input></td>
         </tr>
        </table>
    </form>
</body>
</html>




//  for Alerting Notification

public class Notification extends Receiver {


@Override
public void onReceive(Context context, Intent intent) {

    Log.d("NOTIF","YESSSS, IT's WORKING");

    NotifJobIntentService.enqueueWork(context,intent);

}}

public class NotifJobIntentService extends JobIntentService {

private static final String TAG = "NotifJobIntentService";
private Context context;

static void enqueueWork(Context context, Intent intent) {
    enqueueWork(context, NotifJobIntentService.class, 123 , intent);
}


@Override
public void onCreate() {
    super.onCreate();
    Log.d(TAG, "onCreate");
}

@Override
protected void onHandleWork(@NonNull Intent intent) {
    context = getApplicationContext();

    Log.d(TAG, "OnHandleWork");

    String input = intent.getStringExtra("inputExtra");

    intent.setFlags(intent.FLAG_INCLUDE_STOPPED_PACKAGES);
    Intent intent1 = new Intent(context , MainFragment.class);
    PendingIntent pIntent = PendingIntent.getActivity(context, 0, intent, 0);

    Notification.Builder builder = new Notification.Builder(context)
            .setTicker("Notification")
            .setContentTitle("Important Message")
            .setContentText("This is an example of a push notification using a Navigation Manager")
            .setSmallIcon(R.drawable.ic_add)
            .setContentIntent(pIntent);

    NotificationManager notificationManager = (NotificationManager) context.getSystemService(context.NOTIFICATION_SERVICE);

    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
    {
        String channelId = "Your_channel_id";
        NotificationChannel channel = new NotificationChannel(
                channelId,
                "Reminder to remind to review your notes",
                NotificationManager.IMPORTANCE_HIGH);
        channel.setDescription("Hello Dear friends"); //this is to test what this is
        notificationManager.createNotificationChannel(channel);
        builder.setChannelId(channelId);
    }


    Notification notification = builder.build();
    notification.flags = Notification.FLAG_AUTO_CANCEL;



    notificationManager.notify(0, notification);
}

@Override
public void onDestroy() {
    super.onDestroy();
    Log.d(TAG, "onDestroy");
}

@Override
public boolean onStopCurrentWork() {
    Log.d(TAG, "onStopCurrentWork");
    return false;
}
}


private void setNotification(){

    



    Calendar time = Calendar.getInstance();

    time.set(Calendar.HOUR_OF_DAY,11);
    time.set(Calendar.MINUTE, 30);
    time.set(Calendar.SECOND,0);


    NotificationManager am =( NotificationManager)getContext().getSystemService(Context.Notification_SERVICE);
    Intent i = new Intent(getActivity(), Notification.class);
    i.setAction("android.intent.action.NOTIFY");
    PendingIntent pi = PendingIntent.getBroadcast(getContext(), 0, i, PendingIntent.FLAG_ONE_SHOT);


    if (Build.VERSION.SDK_INT >= 23){
        am.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,time.getTimeInMillis(),pi);
    }

    else{
        am.set(AlarmManager.RTC_WAKEUP,time.getTimeInMillis(),pi);
    }

}




//For requesting WM through HNI's



var client = HttpClient.newHttpClient();
var request = HttpRequest.newBuilder(
       URI.create("https://appointment.com"))
   .header("accept", "application/json")
   .build();
var response = client.send(request, new JsonBodyHandler<>(APPOINTMENT.class));
System.out.println(response.body().get().APPOINTMENT BOOKED);